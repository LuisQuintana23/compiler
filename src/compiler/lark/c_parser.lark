// lark parser for c language

// token definitions
%import common.WS
%import common.NEWLINE
%ignore WS
%ignore NEWLINE

// keywords
KEYWORD: "auto" | "const" | "double" | "float" | "int" | "short" | "struct" | "unsigned"
       | "break" | "continue" | "else" | "for" | "long" | "signed" | "switch" | "void"
       | "case" | "default" | "enum" | "goto" | "register" | "sizeof" | "typedef" | "volatile"
       | "char" | "do" | "extern" | "if" | "return" | "static" | "union" | "while"
       | "printf"

TYPE_KEYWORD: "int" | "char" | "float" | "double" | "void" | "short" | "long" | "signed" | "unsigned"

// operators
OPERATOR: "++" | "--" | "->" | "==" | "!=" | "<=" | ">=" | "&&" | "||"
        | "+" | "-" | "*" | "/" | "%" | "=" | "<" | ">" | "!" | "&" | "|" | "^" | "~"

// constants
CONSTANT: /[0-9]+(\.[0-9]+)?([eE][+-]?[0-9]+)?/  // decimal numbers
        | /0[xX][0-9a-fA-F]+/                    // hexadecimal numbers
        | /0[0-7]*/                              // octal numbers

// identifiers and literals
IDENTIFIER: /[a-zA-Z_][a-zA-Z_0-9]*/
LITERAL: /"([^\\\n]|(\\.))*?"/

// punctuation
LPAREN: "("
RPAREN: ")"
LBRACE: "{"
RBRACE: "}"
SEMI: ";"
COMMA: ","

// grammar rules
start: program

program: external_declaration*

external_declaration: function_definition
                   | var_declaration
                   | SEMI

var_declaration: "int" IDENTIFIER SEMI
               | "int" IDENTIFIER "=" expression SEMI
               | "int" IDENTIFIER "[" expression? "]" SEMI

function_definition: "int" IDENTIFIER "(" parameter_list? ")" compound_statement
                   | "int" IDENTIFIER "(" parameter_list? ")" SEMI

struct_specifier: "struct" IDENTIFIER? "{" struct_declaration_list "}"
                | "struct" IDENTIFIER

struct_declaration_list: struct_declaration+

struct_declaration: "int" IDENTIFIER SEMI

parameter_list: parameter_declaration (COMMA parameter_declaration)*

parameter_declaration: "int" IDENTIFIER

statement: labeled_statement
        | compound_statement
        | expression_statement
        | selection_statement
        | iteration_statement
        | jump_statement

labeled_statement: IDENTIFIER ":" statement
                 | "case" constant_expression ":" statement
                 | "default" ":" statement

expression_statement: expression? SEMI

compound_statement: "{" block_item* "}"

block_item: var_declaration
         | statement

selection_statement: "if" "(" expression ")" statement ("else" statement)?
                  | "switch" "(" expression ")" statement

iteration_statement: "while" "(" expression ")" statement
                   | "do" statement "while" "(" expression ")" SEMI
                   | "for" "(" expression? SEMI expression? SEMI expression? ")" statement

jump_statement: "continue" SEMI
              | "break" SEMI
              | "return" expression? SEMI
              | "goto" IDENTIFIER SEMI

expression: assignment_expression (COMMA assignment_expression)*

assignment_expression: conditional_expression
                     | unary_expression assignment_operator assignment_expression

assignment_operator: "=" | "*=" | "/=" | "%=" | "+=" | "-=" | "<<=" | ">>=" | "&=" | "^=" | "|="

conditional_expression: logical_or_expression ("?" expression ":" conditional_expression)?

logical_or_expression: logical_and_expression ("||" logical_and_expression)*

logical_and_expression: inclusive_or_expression ("&&" inclusive_or_expression)*

inclusive_or_expression: exclusive_or_expression ("|" exclusive_or_expression)*

exclusive_or_expression: and_expression ("^" and_expression)*

and_expression: equality_expression ("&" equality_expression)*

equality_expression: relational_expression (("==" | "!=") relational_expression)*

relational_expression: shift_expression (("<" | ">" | "<=" | ">=") shift_expression)*

shift_expression: additive_expression (("<<" | ">>") additive_expression)*

additive_expression: multiplicative_expression (("+" | "-") multiplicative_expression)*

multiplicative_expression: cast_expression (("*" | "/" | "%") cast_expression)*

cast_expression: "(" "int" ")" cast_expression
               | unary_expression

unary_expression: postfix_expression
                | "++" unary_expression
                | "--" unary_expression
                | unary_operator cast_expression
                | "sizeof" unary_expression
                | "sizeof" "(" "int" ")"

unary_operator: "+" | "-" | "!" | "~" | "*" | "&"

postfix_expression: primary_expression
                  | postfix_expression "[" expression "]"
                  | postfix_expression "(" argument_expression_list? ")"
                  | postfix_expression "." IDENTIFIER
                  | postfix_expression "->" IDENTIFIER
                  | postfix_expression "++"
                  | postfix_expression "--"

primary_expression: IDENTIFIER
                  | CONSTANT
                  | LITERAL
                  | "(" expression ")"
                  | "(" compound_statement ")"

argument_expression_list: assignment_expression (COMMA assignment_expression)*

constant_expression: conditional_expression 
