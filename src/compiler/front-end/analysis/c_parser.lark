// lark parser for c language

// token definitions
%import common.WS
%import common.NEWLINE
%ignore WS
%ignore NEWLINE

// type keywords
INT: "int"
FLOAT: "float"
DOUBLE: "double"

// other keywords
RETURN: "return"
PRINTF: "printf"
IF: "if"
ELSE: "else"

// operators
PLUS: "+"
MINUS: "-"
STAR: "*"
SLASH: "/"
PERCENT: "%"
EQUAL: "="
EQ: "=="
NEQ: "!="

// constants
NUMBER: /[0-9]+/
STRING: /"([^"\\]|\\.)*"/

// identifiers
IDENTIFIER: /[a-zA-Z_][a-zA-Z_0-9]*/

// punctuation
LPAREN: "("
RPAREN: ")"
LBRACE: "{"
RBRACE: "}"
SEMI: ";"
COMMA: ","

// grammar rules
start: program

program: function_definition

function_definition: type_specifier IDENTIFIER "(" ")" compound_statement

type_specifier: INT
              | FLOAT
              | DOUBLE

compound_statement: "{" statement* "}"

statement: declaration
        | assignment_expression SEMI
        | function_call
        | return_statement
        | if_statement

declaration: type_specifier IDENTIFIER SEMI
          | type_specifier IDENTIFIER "=" NUMBER SEMI

assignment_expression: IDENTIFIER "=" expr

function_call: IDENTIFIER "(" argument_list? ")" SEMI

argument_list: argument (COMMA argument)*

argument: expr
       | STRING

return_statement: RETURN expr? SEMI

if_statement: IF "(" expr ")" compound_statement
           | IF "(" expr ")" compound_statement ELSE compound_statement

expr: term
    | expr PLUS term
    | expr MINUS term
    | expr EQ term
    | expr NEQ term

term: factor
    | term STAR factor
    | term SLASH factor
    | term PERCENT factor

factor: IDENTIFIER
      | NUMBER
      | "(" expr ")"
